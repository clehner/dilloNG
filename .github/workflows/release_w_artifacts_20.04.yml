name: Release with Artifacts

on:
  workflow_dispatch:
  #push:
    #tags:
    #  - 'v*'

jobs:
  make_release_fossa:
    name: Make Release with Binaries and Source
    runs-on: ubuntu-20.04
    steps:

      - name: Code Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Autogen
        run: ./autogen.sh

      - name: Configure
        run: ./configure --enable-ssl --prefix=/usr

      - name: Make
        run: make

      - name: Check
        run: make check

      - name: Install check
        run: make installcheck

      - name: Make Build
        run: make install DESTDIR=./build

      - name: build fossa64 bin artifact
        run: cd ./build && tar -cvJf ../dillo_3.1.0_fossa64_bin.tar.xz . && cd .. && pwd &&  ls -lh *.xz

      - name: Make SquashFS file
        run: mksquashfs build/ dillo_3.1.0_fossa64.sfs -comp zstd -Xcompression-level 22

      - name: Make Deb package
        id: make_deb
        run: cd build && dpkg-buildpackage -b -uc -us && ls -ltr | tail -2 && cd ..

      - name: Make PET config file
        run: echo "dillo-3.1|dillo|3.1||Internet|9204K||dillo-3.1.pet|libfltk1.3,libmbedcrypto3|Lightweight browser|ubuntu|focal||" > build/pet.specs
        
      - name: Make PET package
        id: make_pet
        run: mv build dillo-3.1 && tar -c -f dillo-3.1.tar dillo-3.1/ && xz -z -6 -e -T 0 dillo-3.1.tar && echo -n `md5sum dillo-3.1.tar.xz | cut -f 1 -d ' '` >> dillo-3.1.tar.xz && mv dillo-3.1.tar.xz dillo-3.1_fossa64.pet
        
      - name: Get App Version
        id: version
        run: echo "::set-output name=version::$(./myapp --version)"

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ github.ref }}_release # Need to append release, so that if manually using GitHub "Draft a new release" button created tag doesn't conflict with the same name
          tag_name: Release 3.1_eval
          # release_name: ${{ steps.version.outputs.version }} # Could use from version field above
          # release_name: Release ${{ github.ref }} # Overrides if you used "Draft a new release" button > name field
          release_name: Release 3.1_test
          # body_path: CHANGELOG.md
          # body: ${{steps.build_changelog.outputs.changelog}} # Overrides if you used "Draft a new release" button > body field TODO: append to body
          # body: Dillo release 3.1 with updates from this repository
          draft: true
          prerelease: true

      - name: Upload Release Artifact / Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dillo_3.1.0_fossa64_bin.tar.xz
          asset_name: dillo_3.1.0_fossa64_bin.tar.xz
          asset_content_type: application/x-xz

      - name: Upload Release Artifact / Asset SFS
        id: upload-release-asset-sfs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dillo_3.1.0_fossa64.sfs
          asset_name: dillo_3.1.0_fossa64.sfs
          asset_content_type: application/x-xz

      - name: Upload Release Artifact / Asset PET
        id: upload-release-asset-pet
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dillo-3.1_fossa64.pet
          asset_name: dillo-3.1_fossa64.pet
          asset_content_type: application/x-xz
